extern crate protoc_rust;

use std::fs;
use std::io::Write;
use std::path::Path;

fn main() {

    let dir = "../../protobufs/monitor";
    let inputs: Vec<String> = {
        let paths = fs::read_dir(dir).expect("read_dir");
        paths.map(|p| p.unwrap().path().into_os_string().into_string().unwrap()).collect() // oh dear
    };

    println!("inputs: {:?}", inputs);

    // awful
    let inputs_ref: Vec<&str> = inputs.iter().map(|p| &**p).collect();

    let out_dir = "src/proto";
    fs::create_dir(out_dir).unwrap_or(()); // ignore failure

    protoc_rust::run(protoc_rust::Args {
        out_dir: out_dir,
        input: &inputs_ref,
        includes: &[dir],
    }).expect("protoc");

    // create mod.rs
    let mut modrs = fs::File::create(format!("{}/mod.rs", out_dir)).expect("create mod.rs");
    modrs.write_all(String::from("// beware, this is autogenerated!\n").as_bytes()).expect("write_all");

    for i in &inputs {
        let path = Path::new(i);
        let name = path.file_stem().expect("file_stem").to_os_string().into_string().unwrap(); // absolutely horrendous
        modrs.write_all(format!("pub mod {};\n", name).as_bytes()).expect("write_all");
    }
}
